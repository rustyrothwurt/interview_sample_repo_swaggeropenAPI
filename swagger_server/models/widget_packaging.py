# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WidgetPackaging(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, widget_id: Widgetpropertiesid=None, desc: str=None, container: str=None, quantity: float=None):  # noqa: E501
        """WidgetPackaging - a model defined in Swagger

        :param id: The id of this WidgetPackaging.  # noqa: E501
        :type id: int
        :param widget_id: The widget_id of this WidgetPackaging.  # noqa: E501
        :type widget_id: Widgetpropertiesid
        :param desc: The desc of this WidgetPackaging.  # noqa: E501
        :type desc: str
        :param container: The container of this WidgetPackaging.  # noqa: E501
        :type container: str
        :param quantity: The quantity of this WidgetPackaging.  # noqa: E501
        :type quantity: float
        """
        self.swagger_types = {
            'id': int,
            'widget_id': Widgetpropertiesid,
            'desc': str,
            'container': str,
            'quantity': float
        }

        self.attribute_map = {
            'id': 'id',
            'widget_id': 'widgetId',
            'desc': 'desc',
            'container': 'container',
            'quantity': 'quantity'
        }

        self._id = id
        self._widget_id = widget_id
        self._desc = desc
        self._container = container
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'WidgetPackaging':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WidgetPackaging of this WidgetPackaging.  # noqa: E501
        :rtype: WidgetPackaging
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this WidgetPackaging.


        :return: The id of this WidgetPackaging.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this WidgetPackaging.


        :param id: The id of this WidgetPackaging.
        :type id: int
        """

        self._id = id

    @property
    def widget_id(self) -> Widgetpropertiesid:
        """Gets the widget_id of this WidgetPackaging.


        :return: The widget_id of this WidgetPackaging.
        :rtype: Widgetpropertiesid
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id: Widgetpropertiesid):
        """Sets the widget_id of this WidgetPackaging.


        :param widget_id: The widget_id of this WidgetPackaging.
        :type widget_id: Widgetpropertiesid
        """

        self._widget_id = widget_id

    @property
    def desc(self) -> str:
        """Gets the desc of this WidgetPackaging.


        :return: The desc of this WidgetPackaging.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc: str):
        """Sets the desc of this WidgetPackaging.


        :param desc: The desc of this WidgetPackaging.
        :type desc: str
        """

        self._desc = desc

    @property
    def container(self) -> str:
        """Gets the container of this WidgetPackaging.


        :return: The container of this WidgetPackaging.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this WidgetPackaging.


        :param container: The container of this WidgetPackaging.
        :type container: str
        """

        self._container = container

    @property
    def quantity(self) -> float:
        """Gets the quantity of this WidgetPackaging.


        :return: The quantity of this WidgetPackaging.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: float):
        """Sets the quantity of this WidgetPackaging.


        :param quantity: The quantity of this WidgetPackaging.
        :type quantity: float
        """

        self._quantity = quantity
