# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SupplierCosts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, widget_id: Widgetpropertiesid=None, supplier_id: Supplierpropertiesid=None, warehouse: str=None, quantity: int=None, min_quantity: int=None, cost: float=None):  # noqa: E501
        """SupplierCosts - a model defined in Swagger

        :param widget_id: The widget_id of this SupplierCosts.  # noqa: E501
        :type widget_id: Widgetpropertiesid
        :param supplier_id: The supplier_id of this SupplierCosts.  # noqa: E501
        :type supplier_id: Supplierpropertiesid
        :param warehouse: The warehouse of this SupplierCosts.  # noqa: E501
        :type warehouse: str
        :param quantity: The quantity of this SupplierCosts.  # noqa: E501
        :type quantity: int
        :param min_quantity: The min_quantity of this SupplierCosts.  # noqa: E501
        :type min_quantity: int
        :param cost: The cost of this SupplierCosts.  # noqa: E501
        :type cost: float
        """
        self.swagger_types = {
            'widget_id': Widgetpropertiesid,
            'supplier_id': Supplierpropertiesid,
            'warehouse': str,
            'quantity': int,
            'min_quantity': int,
            'cost': float
        }

        self.attribute_map = {
            'widget_id': 'widgetId',
            'supplier_id': 'supplierId',
            'warehouse': 'warehouse',
            'quantity': 'quantity',
            'min_quantity': 'min_quantity',
            'cost': 'cost'
        }

        self._widget_id = widget_id
        self._supplier_id = supplier_id
        self._warehouse = warehouse
        self._quantity = quantity
        self._min_quantity = min_quantity
        self._cost = cost

    @classmethod
    def from_dict(cls, dikt) -> 'SupplierCosts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SupplierCosts of this SupplierCosts.  # noqa: E501
        :rtype: SupplierCosts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def widget_id(self) -> Widgetpropertiesid:
        """Gets the widget_id of this SupplierCosts.


        :return: The widget_id of this SupplierCosts.
        :rtype: Widgetpropertiesid
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id: Widgetpropertiesid):
        """Sets the widget_id of this SupplierCosts.


        :param widget_id: The widget_id of this SupplierCosts.
        :type widget_id: Widgetpropertiesid
        """

        self._widget_id = widget_id

    @property
    def supplier_id(self) -> Supplierpropertiesid:
        """Gets the supplier_id of this SupplierCosts.


        :return: The supplier_id of this SupplierCosts.
        :rtype: Supplierpropertiesid
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id: Supplierpropertiesid):
        """Sets the supplier_id of this SupplierCosts.


        :param supplier_id: The supplier_id of this SupplierCosts.
        :type supplier_id: Supplierpropertiesid
        """

        self._supplier_id = supplier_id

    @property
    def warehouse(self) -> str:
        """Gets the warehouse of this SupplierCosts.


        :return: The warehouse of this SupplierCosts.
        :rtype: str
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse: str):
        """Sets the warehouse of this SupplierCosts.


        :param warehouse: The warehouse of this SupplierCosts.
        :type warehouse: str
        """

        self._warehouse = warehouse

    @property
    def quantity(self) -> int:
        """Gets the quantity of this SupplierCosts.


        :return: The quantity of this SupplierCosts.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this SupplierCosts.


        :param quantity: The quantity of this SupplierCosts.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def min_quantity(self) -> int:
        """Gets the min_quantity of this SupplierCosts.


        :return: The min_quantity of this SupplierCosts.
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity: int):
        """Sets the min_quantity of this SupplierCosts.


        :param min_quantity: The min_quantity of this SupplierCosts.
        :type min_quantity: int
        """

        self._min_quantity = min_quantity

    @property
    def cost(self) -> float:
        """Gets the cost of this SupplierCosts.


        :return: The cost of this SupplierCosts.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: float):
        """Sets the cost of this SupplierCosts.


        :param cost: The cost of this SupplierCosts.
        :type cost: float
        """

        self._cost = cost
