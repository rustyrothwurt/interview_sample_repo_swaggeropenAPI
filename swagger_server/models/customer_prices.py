# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CustomerPrices(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, widget_packaging_id: WidgetPackagingpropertiesid=None, customer_id: Customerpropertiesid=None, price: float=None):  # noqa: E501
        """CustomerPrices - a model defined in Swagger

        :param widget_packaging_id: The widget_packaging_id of this CustomerPrices.  # noqa: E501
        :type widget_packaging_id: WidgetPackagingpropertiesid
        :param customer_id: The customer_id of this CustomerPrices.  # noqa: E501
        :type customer_id: Customerpropertiesid
        :param price: The price of this CustomerPrices.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'widget_packaging_id': WidgetPackagingpropertiesid,
            'customer_id': Customerpropertiesid,
            'price': float
        }

        self.attribute_map = {
            'widget_packaging_id': 'widgetPackagingId',
            'customer_id': 'customerId',
            'price': 'price'
        }

        self._widget_packaging_id = widget_packaging_id
        self._customer_id = customer_id
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerPrices':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerPrices of this CustomerPrices.  # noqa: E501
        :rtype: CustomerPrices
        """
        return util.deserialize_model(dikt, cls)

    @property
    def widget_packaging_id(self) -> WidgetPackagingpropertiesid:
        """Gets the widget_packaging_id of this CustomerPrices.


        :return: The widget_packaging_id of this CustomerPrices.
        :rtype: WidgetPackagingpropertiesid
        """
        return self._widget_packaging_id

    @widget_packaging_id.setter
    def widget_packaging_id(self, widget_packaging_id: WidgetPackagingpropertiesid):
        """Sets the widget_packaging_id of this CustomerPrices.


        :param widget_packaging_id: The widget_packaging_id of this CustomerPrices.
        :type widget_packaging_id: WidgetPackagingpropertiesid
        """

        self._widget_packaging_id = widget_packaging_id

    @property
    def customer_id(self) -> Customerpropertiesid:
        """Gets the customer_id of this CustomerPrices.


        :return: The customer_id of this CustomerPrices.
        :rtype: Customerpropertiesid
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: Customerpropertiesid):
        """Sets the customer_id of this CustomerPrices.


        :param customer_id: The customer_id of this CustomerPrices.
        :type customer_id: Customerpropertiesid
        """

        self._customer_id = customer_id

    @property
    def price(self) -> float:
        """Gets the price of this CustomerPrices.


        :return: The price of this CustomerPrices.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this CustomerPrices.


        :param price: The price of this CustomerPrices.
        :type price: float
        """

        self._price = price
